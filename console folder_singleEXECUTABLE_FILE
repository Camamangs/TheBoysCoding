 /*                                               < console folder > single file executable version
/-+ changed fname to fname_arr [11/25/2023]
  ++return_prev_name function [11/26/2023]
  ready for test runs
 >spreading this next time
 >put new code in separate test file with dates
 !use symbols for specifying comments.
                   <comment symbols>
* for notable changes place a comment with "// -+ 'changes & reasons'"
* for after adding new code comment with "// + 'functions'"
* for problems/issues use "// !! 'statement'"
* for after completely erasing a line use "// -- 'reasons'"*/
//#include 'console.h' (file in the works, no function used here)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <ctype.h>

//                                                    < basic entry >
#define max 21//length for folder name
//                                                   <==runtime functions==>
char fname_arr[3][max] = {"FOLDER"},gname[max];//name sorting -+ folder names in to array for fixed passes + gname to store prev inputed name
char filename[41];
//inputs:
int filecounter,in1count=0,subop1; //counters
char in1,in2;
int a;//used to switch naming values
void blink() {}


void base(){base_act_display(); folder_name(); action();}
int main(){base(); return 0;}

void folder_name()
    {if (in1count == 0){a=0;}
        printf("\033[0m==%s==", fname_arr[a]);
     return;}

void op1_folder_name() {
    system("cls");
    naming_act_display();
    folder_name();

    gotoxy(60,2);
    printf("\033[1;32mnew folder name -> ");

    if (in1count == 0){a=1;}//if process is not done puts input in 1st array
    //else if (in1count == 2){in1count--;}//decrement if done twice
    //else {a++;}//process is done once

    scanf("%20s", fname_arr[a]);

    if (!strcmp(fname_arr[a],"/1")){

            in1count = 0;
            return_prev_name();
            goback();}
    else if (!strcmp(fname_arr[a],"/2")){
            return_prev_name();
            goback();}     //cancel process
    //else if (!strcmp(fname,"/3"))
    //else if (!strcmp(fname,"/4"))
    else
        {in1count++;// indicate finished process
        strcpy(gname, fname_arr[1]);
        system("cls");
        base();}}

void action(){gotoxy(60,2);
    printf("\033[1;32m|action|>");
    in1=fgetc(stdin);

     if (in1==0x0A){ base(); }                             //stops user from pressing enter
     else if (in1 == '1') {op1_folder_name();}
     else if (in1 == '2') {goback();}
     else if (in1 == '3') {file_system();}
     else if (in1 == '4') {gotoxy(60,3);
            console("closing program");
                         countdown(4);
                         exit(0);}
     else {input_error();
           base();}}



void file_system()
        {system("cls");
        gotoxy(60,1);
        printf("['/1'.edit file name] ['/2'.back] ['/3'.open file] ['/4'.exit]\n");

        if (in2 == 1){
        printf("\n\033[1;32mfile name --> ");
        scanf("%40s", filename);}

        filecounter++;
        system("cls");
        base();}
//                                                         <==executable functions==>
void gotoxy(int x, int y) {printf("\033[%d;%dH", y, x);}   //temp cursor position

void console(const char *x)                                //console message shortcut(kay kapoy sig balik type ani)
{printf("\033[1;33m\e[5m[console]%s\033[0m\e[25m",x);
return;}

void base_act_display() {gotoxy(60,1);                     //base options for action
    printf("\033[0m[1.edit folder name] [2.back] [3.create file] [4.exit]\n");
    return;}

void naming_act_display(){gotoxy(60,1);                               //action options while naming folder
    printf("\033[0m['/1'.reset name] ['/2'.back] ['/3'.create file] ['/4'.exit]\n");
    return;}

void input_error()                                       //invalid message (also flush the stdin/out)
{gotoxy(60,2);
printf("\033[1;31mInvalid!\033[0m\n");
        fflush(stdin);
        fflush(stdout);
        usleep(10000);
        goback();}

void goback(){gotoxy(60,3);                               //back message
        console("going back..");
        countdown(3);
        system("cls");
        base();}


void countdown(int x)
               {for (int count = x;count>-1;count--){
                printf(" \033[1;31m%d\033[0m",count);
                usleep(400000);
                printf("\b\b\0");}
                return;}

void return_prev_name()//returns previous inputed name
    {strcpy(fname_arr[a],gname);
    return;}

//void debug(){}                                //function for easy debugging and displays input infos

/*void delstr(int a) {int loop_eraser=0;                   //specific text eraser (in progress)
                    for (;loop_eraser<a;loop_eraser++){     //should take in specific xy before executed
                            gotoxy(100,1);                  //needs to decriment y until certain value or until there are no more texts
                    printf("\b\0");}
                    return;}*/
//void logs(){}                                            //keep track of actions
            //blinks specific texts (i already have a separate file in works)
